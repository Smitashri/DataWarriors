import sysfrom awsglue.transforms import *from awsglue.utils import getResolvedOptionsfrom pyspark.context import SparkContextfrom awsglue.context import GlueContextfrom awsglue.job import Job## @params: [TempDir, JOB_NAME]args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])sc = SparkContext()glueContext = GlueContext(sc)spark = glueContext.spark_sessionjob = Job(glueContext)job.init(args['JOB_NAME'], args)## @type: DataSource## @args: [database = "dev-project-glue", table_name = "movie_industry_cleaned_tsv", transformation_ctx = "datasource0"]## @return: datasource0## @inputs: []datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "dev-project-glue", table_name = "movie_industry_cleaned_tsv", transformation_ctx = "datasource0")## @type: ApplyMapping## @args: [mapping = [("budget", "string", "d_budget", "string"), ("company", "string", "d_company", "string"), ("country", "string", "d_country", "string"), ("genre", "string", "d_genre", "string"), ("gross", "string", "d_gross", "string"), ("movie_id", "string", "d_movie_id", "string"), ("score", "string", "d_rating", "string"), ("runtime", "string", "d_runtime", "string"), ("votes", "long", "d_votes", "long"), ("name", "string", "d_title", "string"), ("year", "long", "d_releaseyear", "long")], transformation_ctx = "applymapping1"]## @return: applymapping1## @inputs: [frame = datasource0]applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("budget", "string", "d_budget", "string"), ("company", "string", "d_company", "string"), ("country", "string", "d_country", "string"), ("genre", "string", "d_genre", "string"), ("gross", "string", "d_gross", "string"), ("movie_id", "string", "d_movie_id", "string"), ("score", "string", "d_rating", "string"), ("runtime", "string", "d_runtime", "string"), ("votes", "long", "d_votes", "long"), ("name", "string", "d_title", "string"), ("year", "long", "d_releaseyear", "long")], transformation_ctx = "applymapping1")## @type: SelectFields## @args: [paths = ["d_budget", "d_runtime", "d_title", "d_rating", "d_gross", "d_isadult", "d_releaseyear", "d_genre", "d_votes", "d_original_title", "d_company", "d_movie_id", "d_country"], transformation_ctx = "selectfields2"]## @return: selectfields2## @inputs: [frame = applymapping1]selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["d_budget", "d_runtime", "d_title", "d_rating", "d_gross", "d_isadult", "d_releaseyear", "d_genre", "d_votes", "d_original_title", "d_company", "d_movie_id", "d_country"], transformation_ctx = "selectfields2")## @type: ResolveChoice## @args: [choice = "MATCH_CATALOG", database = "dev-project-glue-redshift", table_name = "dwdev_project_public_dimension_movie", transformation_ctx = "resolvechoice3"]## @return: resolvechoice3## @inputs: [frame = selectfields2]resolvechoice3 = ResolveChoice.apply(frame = selectfields2, choice = "MATCH_CATALOG", database = "dev-project-glue-redshift", table_name = "dwdev_project_public_dimension_movie", transformation_ctx = "resolvechoice3")## @type: ResolveChoice## @args: [choice = "make_cols", transformation_ctx = "resolvechoice4"]## @return: resolvechoice4## @inputs: [frame = resolvechoice3]resolvechoice4 = ResolveChoice.apply(frame = resolvechoice3, choice = "make_cols", transformation_ctx = "resolvechoice4")## @type: DataSink## @args: [database = "dev-project-glue-redshift", table_name = "dwdev_project_public_dimension_movie", redshift_tmp_dir = TempDir, transformation_ctx = "datasink5"]## @return: datasink5## @inputs: [frame = resolvechoice4]datasink5 = glueContext.write_dynamic_frame.from_catalog(frame = resolvechoice4, database = "dev-project-glue-redshift", table_name = "dwdev_project_public_dimension_movie", redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink5")job.commit()